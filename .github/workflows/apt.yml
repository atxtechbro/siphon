name: Publish APT Package

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  # release:  # Use release trigger for production, push for dev.
  #   types: [published]

jobs:
  apt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Version from Tag or Fallback
        id: get_version
        run: |
          if [[ "${{ github.ref_name }}" == v* ]]; then
            VERSION=${GITHUB_REF_NAME#v}
          else
            VERSION="main"  # Fallback version for pushes to main
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y debmake lintian build-essential devscripts

      - name: Update Debian Changelog
        run: |
          dch -v "${{ steps.get_version.outputs.version }}-1" "New release" --create --distribution unstable --force-distribution
        working-directory: .
        env:
          DEBEMAIL: morganj2k@gmail.com
          DEBFULLNAME: Morgan Joyce

      - name: Build Debian Package
        id: build_package
        run: |
          # Use debuild, a cleaner way to build Debian packages
          # '-b' builds a binary-only package (since it's pure Python, we don't need source)
          # '-uc' and '-us' skip signing (for this example; you'd add signing steps later)
          debuild -b -uc -us
        working-directory: .  # Ensure we are in the root

      - name: Run Lintian
        run: |
          lintian ../*.changes  # Lintian should now find the .changes file one level up

      - name: Upload Artifacts (Deb and Changes)
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: |
            ../siphon_${{ steps.get_version.outputs.version }}-1_all.deb
            ../siphon_${{ steps.get_version.outputs.version }}-1_all.changes
          if-no-files-found: error
